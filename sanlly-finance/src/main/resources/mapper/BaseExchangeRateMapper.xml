<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sanlly.finance.dao.BaseExchangeRateMapper">
  <resultMap id="BaseResultMap" type="com.sanlly.finance.entity.BaseExchangeRate">
    <id column="exchange_rate_id" jdbcType="INTEGER" property="exchangeRateId" />
    <result column="rate_year_month" jdbcType="VARCHAR" property="rateYearMonth" />
    <result column="currency_type" jdbcType="VARCHAR" property="currencyType" />
    <result column="exchange_rate" jdbcType="DECIMAL" property="exchangeRate" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="is_enabled" jdbcType="VARCHAR" property="isEnabled" />
    <result column="is_del" jdbcType="INTEGER" property="isDel" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user" jdbcType="INTEGER" property="createUser" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user" jdbcType="INTEGER" property="updateUser" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    exchange_rate_id, rate_year_month, currency_type, exchange_rate, remarks, is_enabled, 
    is_del, create_time, create_user, update_time, update_user
  </sql>
  <select id="selectByExample" parameterType="com.sanlly.finance.entity.BaseExchangeRateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from finance_base_exchange_rate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart >=0">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from finance_base_exchange_rate
    where exchange_rate_id = #{exchangeRateId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from finance_base_exchange_rate
    where exchange_rate_id = #{exchangeRateId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sanlly.finance.entity.BaseExchangeRateExample">
    delete from finance_base_exchange_rate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sanlly.finance.entity.BaseExchangeRate">
    <selectKey keyProperty="exchangeRateId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into finance_base_exchange_rate (rate_year_month, currency_type, exchange_rate, 
      remarks, is_enabled, is_del, 
      create_time, create_user, update_time, 
      update_user)
    values (#{rateYearMonth,jdbcType=VARCHAR}, #{currencyType,jdbcType=VARCHAR}, #{exchangeRate,jdbcType=DECIMAL}, 
      #{remarks,jdbcType=VARCHAR}, #{isEnabled,jdbcType=VARCHAR}, #{isDel,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateUser,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.sanlly.finance.entity.BaseExchangeRate">
    <selectKey keyProperty="exchangeRateId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into finance_base_exchange_rate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="rateYearMonth != null">
        rate_year_month,
      </if>
      <if test="currencyType != null">
        currency_type,
      </if>
      <if test="exchangeRate != null">
        exchange_rate,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="isEnabled != null">
        is_enabled,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="rateYearMonth != null">
        #{rateYearMonth,jdbcType=VARCHAR},
      </if>
      <if test="currencyType != null">
        #{currencyType,jdbcType=VARCHAR},
      </if>
      <if test="exchangeRate != null">
        #{exchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="isEnabled != null">
        #{isEnabled,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sanlly.finance.entity.BaseExchangeRateExample" resultType="java.lang.Long">
    select count(*) from finance_base_exchange_rate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update finance_base_exchange_rate
    <set>
      <if test="record.exchangeRateId != null">
        exchange_rate_id = #{record.exchangeRateId,jdbcType=INTEGER},
      </if>
      <if test="record.rateYearMonth != null">
        rate_year_month = #{record.rateYearMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.currencyType != null">
        currency_type = #{record.currencyType,jdbcType=VARCHAR},
      </if>
      <if test="record.exchangeRate != null">
        exchange_rate = #{record.exchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.isEnabled != null">
        is_enabled = #{record.isEnabled,jdbcType=VARCHAR},
      </if>
      <if test="record.isDel != null">
        is_del = #{record.isDel,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update finance_base_exchange_rate
    set exchange_rate_id = #{record.exchangeRateId,jdbcType=INTEGER},
      rate_year_month = #{record.rateYearMonth,jdbcType=VARCHAR},
      currency_type = #{record.currencyType,jdbcType=VARCHAR},
      exchange_rate = #{record.exchangeRate,jdbcType=DECIMAL},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      is_enabled = #{record.isEnabled,jdbcType=VARCHAR},
      is_del = #{record.isDel,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sanlly.finance.entity.BaseExchangeRate">
    update finance_base_exchange_rate
    <set>
      <if test="rateYearMonth != null">
        rate_year_month = #{rateYearMonth,jdbcType=VARCHAR},
      </if>
      <if test="currencyType != null">
        currency_type = #{currencyType,jdbcType=VARCHAR},
      </if>
      <if test="exchangeRate != null">
        exchange_rate = #{exchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="isEnabled != null">
        is_enabled = #{isEnabled,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
    </set>
    where exchange_rate_id = #{exchangeRateId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sanlly.finance.entity.BaseExchangeRate">
    update finance_base_exchange_rate
    set rate_year_month = #{rateYearMonth,jdbcType=VARCHAR},
      currency_type = #{currencyType,jdbcType=VARCHAR},
      exchange_rate = #{exchangeRate,jdbcType=DECIMAL},
      remarks = #{remarks,jdbcType=VARCHAR},
      is_enabled = #{isEnabled,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER}
    where exchange_rate_id = #{exchangeRateId,jdbcType=INTEGER}
  </update>
</mapper>